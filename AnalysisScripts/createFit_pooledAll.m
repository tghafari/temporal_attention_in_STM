function [fitresult, gof] = createFit_pooledAll(pos_degree, zTrans_meanTP_diff)
%CREATEFIT(POS_DEGREE_SORTED,MEANTP_NORM)
%  Create a fit.
%
%  Data for 'Fourier 2 terms fit' fit:
%      X Input : pos_degree_sorted
%      Y Output: meanTP_norm
%  Output:
%      fitresult : a fit object representing the fit.
%      gof : structure with goodness-of fit info.
%
%  See also FIT, CFIT, SFIT.

%  Auto-generated by MATLAB on 06-Jul-2021 11:42:41


%% Fit: 'Fourier 2 terms fit'.
[xData, yData] = prepareCurveData(pos_degree, zTrans_meanTP_diff);

% Set up fittype and options.
ft = fittype( 'fourier1' );
opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
opts.Display = 'Off';
opts.Normalize = 'on';
opts.StartPoint = [0 0 0 1.95220982834146];
% [0.7146,-0.0193,-1.2412,-0.0200]; gives the exact same parameters

%to give bounds to the parameters
% opts.StartPoint = [-4+(4-(-4))*rand(1,1), -2+(2-(-2))*rand(1,1),-2+(2-(-2))*rand(1,1),0+(10-(-10))*rand(1,1)];
% randS(ii,:)=opts.StartPoint ;


% % Set up fittype and options.
% ft = fittype( 'smoothingspline' );

% % Set up fittype and options. -> for one + three term fourier : useless
% ft =  fittype( 'a0 + a1*cos(x*w) + b1*sin(x*w)', 'independent', 'x', 'dependent', 'y');
% opts = fitoptions( 'Method', 'NonlinearLeastSquares' );
% opts.Display = 'Off';
% opts.StartPoint = [0 0 0 1.95220982834146];

% Fit model to data.
[fitresult,gof,output] = fit(xData,yData,ft, opts );

% Plot fit with data
figure;
h=plot(fitresult,xData,yData);
set(h,'LineWidth',3,'Color',[0 0.5 0.5],'MarkerSize',20)
set(gca,'FontSize',20)
h(1,1).Color = 'k';
% legend( h, 'standard TP vs. position', 'Fourier 1 term fit', 'Location', 'NorthEast', 'Interpreter', 'none' );
% Label axes
xlabel( 'Position in Degrees','FontSize',20); xlim([-20,370]);
ylabel( 'Standardized TPR (z-score)','FontSize',20); ylim([-.8,.65]);
grid on
% figure %Plot the prediction bounds on the fit
% plot(fitresult,xData,yData,'predfunc')
% figure %plot the residuals
% plot(fitresult,xData,yData,'Residuals');
% figure %Plot a histogram of the residuals to look for a roughly normal distribution
% histogram(output.residuals,10)

%% try another function -- not useful

fun = @(a0,a1,b1,w,x) a0 + a1*cos(x*w) + b1*sin(x*w);
opts = optimoptions('lsqcurvefit', 'MaxFunctionEvaluations', 50000, ...
    'MaxIterations', 10000, 'FunctionTolerance', 1e-7);
p = lsqcurvefit(@(p, x) fun(p(1),p(2),p(3),p(4),x),rand(1,4), xData, yData, [], [], opts);
plot(xData, yData, 'b+')
hold on
plot(xData, fun(p(1),p(2),p(3),p(4),xData), 'm-');


